
    // Plot initial centroids and cluster assignments (2D)
    if let Err(e) = plot_centroides(
        training_dataset.rows.clone(), 
        &centroides, 
        MIN, 
        MAX, 
        "centroide_original.png",
        Some(&cluster_assignments),
        SHOW_CLASSES,
        Some("Initial K-means++ Cluster Assignments"),
    ) {
        eprintln!("Error plotting initial centroids: {}", e);
    }
    
    // Plot initial centroids and cluster assignments (3D)
    if let Err(e) = plot_3d(
        &training_dataset.rows, 
        &centroides, 
        MIN, 
        MAX, 
        "centroide_original_2d_5k.png", 
        &feature_names,
        Some(&cluster_assignments),
        SHOW_CLASSES,
        Some("Initial K-means++ Cluster Assignments"),
    ) {
        eprintln!("Error plotting 3D initial centroids: {}", e);
    }

    // Update centroids once
    let centroides_actualizados = actualizar_centroides(&training_data, &cluster_assignments, K);
    // Get new assignments after updating centroids
    let cluster_assignments_updated = asignar_a_clusters(training_data.clone(), centroides_actualizados.clone());

    // Plot updated centroids and cluster assignments (2D)
    if let Err(e) = plot_centroides(
        training_dataset.rows.clone(), 
        &centroides_actualizados, 
        MIN, 
        MAX, 
        "centroide_actualizado.png",
        Some(&cluster_assignments_updated),
        SHOW_CLASSES,
        Some("Updated K-means++ Cluster Assignments (1 iteration)"),
    ) {
        eprintln!("Error plotting updated centroids: {}", e);
    }
    
    // Plot updated centroids and cluster assignments (3D)
    if let Err(e) = plot_3d(
        &training_dataset.rows, 
        &centroides_actualizados, 
        MIN, 
        MAX, 
        "centroide_actualizado_3d.png", 
        &feature_names,
        Some(&cluster_assignments_updated),
        SHOW_CLASSES,
        Some("Updated K-means++ Cluster Assignments (1 iteration)"),
    ) {
        eprintln!("Error plotting 3D updated centroids: {}", e);
    }

    // Iterate until convergence
    println!("Starting K-means iteration until convergence...");
    let centroides_finales = iterar_hasta_optimo(100, training_dataset.rows.clone(), K);
    // Get final assignments
    let cluster_assignments_final = asignar_a_clusters(training_data.clone(), centroides_finales.clone());
    
    // Plot final centroids and cluster assignments (2D)
    if let Err(e) = plot_centroides(
        training_dataset.rows.clone(), 
        &centroides_finales, 
        MIN, 
        MAX, 
        "kmeans_final.png",
        Some(&cluster_assignments_final),
        SHOW_CLASSES,
        Some("Final K-means++ Cluster Assignments"),
    ) {
        eprintln!("Error plotting final centroids: {}", e);
    }
    
    // Plot final centroids and cluster assignments (3D)
    if let Err(e) = plot_3d(
        &training_dataset.rows, 
        &centroides_finales, 
        MIN, 
        MAX, 
        "kmeans_final_3d.png", 
        &feature_names,
        Some(&cluster_assignments_final),
        SHOW_CLASSES,
        Some("Final K-means++ Cluster Assignments"),
    ) {
        eprintln!("Error plotting 3D final centroids: {}", e);
    }
    
    // Print final centroids and some statistics for analysis
    println!("Final centroids:");
    for (i, centroid) in centroides_finales.iter().enumerate() {
        println!("Centroid {}: {:?}", i, centroid);
        
        // Count how many points are assigned to this centroid
        let count = cluster_assignments_final.iter()
            .filter(|&&assignment| assignment == i)
            .count();
        
        println!("  Points assigned to cluster {}: {} ({}%)", 
            i, 
            count, 
            (count as f64 / cluster_assignments_final.len() as f64 * 100.0).round()
        );
    }

    // Optionally plot the testing dataset with the same centroids
    if let Err(e) = plot_centroides(
        testing_dataset.rows.clone(), 
        &centroides_finales, 
        MIN, 
        MAX, 
        "testing_with_final_centroids.png",
        None, // Just show testing data points without cluster assignments
        SHOW_CLASSES,
        Some("Testing Data with Final Centroids"),
    ) {
        eprintln!("Error plotting testing data: {}", e);
    }